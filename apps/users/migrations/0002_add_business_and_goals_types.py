# Generated by Django 5.2.1 on 2025-05-29 19:09

from django.db import migrations


def create_business_types(apps, schema_editor):
    BusinessType = apps.get_model("users", "BusinessType")

    business_types = [
        {
            "code": "home_baker",
            "name": "Home Baker",
            "description": "Someone who runs a baking business from home.",
            "is_default": True,
        },
        {
            "code": "storefront_bakery",
            "name": "Storefront Bakery",
            "description": "A small or medium-sized bakery with a physical shop.",
            "is_default": True,
        },
        {
            "code": "custom_cake_designer",
            "name": "Custom Cake Designer",
            "description": "A baker focused on creating personalized cakes for events like birthdays and weddings.",
            "is_default": True,
        },
        {
            "code": "wholesale_bakery",
            "name": "Wholesale Bakery",
            "description": "A bakery that supplies baked goods to restaurants, cafes, or grocery stores.",
            "is_default": True,
        },
        {
            "code": "catering_business",
            "name": "Catering Business",
            "description": "A service that provides baked goods as part of catering for events.",
            "is_default": True,
        },
        {
            "code": "mobile_popup_baker",
            "name": "Mobile/Pop-up Baker",
            "description": "Bakers who sell goods at markets, fairs, or pop-up shops.",
            "is_default": True,
        },
        {
            "code": "online_bakery",
            "name": "Online Bakery",
            "description": "A bakery that operates primarily online, offering deliveries or pickups.",
            "is_default": True,
        },
        {
            "code": "event_based_baker",
            "name": "Event-Based Baker",
            "description": "Focuses on baking for specific events (e.g., weddings, corporate events).",
            "is_default": True,
        },
        {
            "code": "pastry_chef",
            "name": "Pastry Chef",
            "description": "Specializes in fine pastries, desserts, and confectionaries.",
            "is_default": True,
        },
        {
            "code": "bread_bakery",
            "name": "Bread Bakery",
            "description": "Focuses on producing bread and other baked goods in bulk.",
            "is_default": True,
        },
        {
            "code": "cafe_bistro_with_baking",
            "name": "Cafe/Bistro with Baking",
            "description": "A cafe or bistro that also produces its own baked goods.",
            "is_default": True,
        },
        {
            "code": "cake_business_educator",
            "name": "Cake Business Educator/Trainer",
            "description": "Someone who teaches cake decorating, recipe development, or business strategies.",
            "is_default": True,
        },
        {
            "code": "others",
            "name": "Others (Open Field)",
            "description": "For unique or unspecified business types.",
            "is_default": True,
        },
    ]

    for bt in business_types:
        BusinessType.objects.create(**bt)


def create_primary_goals(apps, schema_editor):
    Goal = apps.get_model("users", "Goal")

    goals = [
        {
            "code": "inventory_management",
            "name": "Inventory Management",
            "description": "To track and manage ingredients or stock levels effectively.",
            "is_default": True,
        },
        {
            "code": "recipe_costing",
            "name": "Recipe Costing",
            "description": "To calculate the cost of recipes accurately and set profitable prices.",
            "is_default": True,
        },
        {
            "code": "order_management",
            "name": "Order Management",
            "description": "To organize and track customer orders, deadlines, and payment statuses.",
            "is_default": True,
        },
        {
            "code": "financial_reporting",
            "name": "Financial Reporting",
            "description": "To get detailed insights into profit, expenses, and cash flow.",
            "is_default": True,
        },
        {
            "code": "profit_margin_optimization",
            "name": "Profit Margin Optimization",
            "description": "To analyze costs and set prices that maximize profit.",
            "is_default": True,
        },
        {
            "code": "time_management",
            "name": "Time Management",
            "description": "To streamline workflows and reduce time spent on administrative tasks.",
            "is_default": True,
        },
        {
            "code": "customer_relationship_management",
            "name": "Customer Relationship Management",
            "description": "To store customer details, manage discounts, and maintain loyalty.",
            "is_default": True,
        },
        {
            "code": "payroll_tracking",
            "name": "Payroll Tracking",
            "description": "To manage staff salaries and payment schedules.",
            "is_default": True,
        },
        {
            "code": "scaling_the_business",
            "name": "Scaling the Business",
            "description": "To grow the business by understanding key insights and reducing inefficiencies.",
            "is_default": True,
        },
        {
            "code": "marketing_support",
            "name": "Marketing Support",
            "description": "To learn strategies for promoting baked goods and attracting more customers.",
            "is_default": True,
        },
        {
            "code": "training_and_learning",
            "name": "Training and Learning",
            "description": "To access tutorials, recipes, and business management tips.",
            "is_default": True,
        },
        {
            "code": "recipe_organization",
            "name": "Recipe Organization",
            "description": "To save, categorize, and easily access all recipes in one place.",
            "is_default": True,
        },
        {
            "code": "overhead_costing",
            "name": "Overhead Costing",
            "description": "To track utilities and overhead expenses in the business.",
            "is_default": True,
        },
        {
            "code": "better_decision_making",
            "name": "Better Decision-Making",
            "description": "To have data-driven insights for making strategic business decisions.",
            "is_default": True,
        },
        {
            "code": "educator_trainer_support",
            "name": "Educator/Trainer Support",
            "description": "Tools for managing students, courses, and training materials.",
            "is_default": True,
        },
        {
            "code": "others",
            "name": "Others (Open Field)",
            "description": "To let users specify unique or less common goals.",
            "is_default": True,
        },
    ]

    for goal in goals:
        Goal.objects.create(**goal)


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(create_business_types, reverse_code=migrations.RunPython.noop),
        migrations.RunPython(create_primary_goals, reverse_code=migrations.RunPython.noop),
    ]
