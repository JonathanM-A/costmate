# Generated by Django 5.2.1 on 2025-06-14 11:00

import django.db.models.deletion
import uuid
from django.db import migrations, models
from django.contrib.auth.hashers import make_password
from django.conf import settings
from django.apps import apps as django_apps


def create_superuser(apps, schema_editor):
    User = apps.get_model("users", "User")
    UserModel = django_apps.get_model("users", "User")

    # Create superuser
    UserModel.objects.create_superuser( # type: ignore
        email=settings.ADMIN_EMAIL,
        password=settings.ADMIN_PASSWORD,
    )


def reverse_superuser(apps, schema_editor):
    User = apps.get_model("users", "User")
    User.objects.filter(email=settings.ADMIN_EMAIL).delete()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="BusinessType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a default business type that cannot be deleted.",
                    ),
                ),
            ],
            options={
                "verbose_name": "Business Type",
                "verbose_name_plural": "Business Types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Goal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("code", models.CharField(max_length=50, unique=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this is a default goal that cannot be deleted.",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("first_name", models.CharField(max_length=50)),
                ("last_name", models.CharField(max_length=50)),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "username",
                    models.CharField(
                        blank=True, max_length=150, null=True, unique=True
                    ),
                ),
                (
                    "personal_contact",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "business_contact",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                (
                    "business_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "custom_business_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "custom_primary_goal",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "location_country",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "location_city",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("opening_time", models.TimeField(blank=True, null=True)),
                ("closing_time", models.TimeField(blank=True, null=True)),
                (
                    "social_media_links",
                    models.JSONField(blank=True, default=dict, null=True),
                ),
                (
                    "preferred_currency",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
                (
                    "staff_count",
                    models.PositiveIntegerField(blank=True, default=1, null=True),
                ),
                (
                    "biggest_challenge",
                    models.TextField(blank=True, max_length=200, null=True),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "business_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="users.businesstype",
                    ),
                ),
                (
                    "primary_goal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="users.goal",
                    ),
                ),
            ],
            options={
                "ordering": ["email"],
            },
        ),
        migrations.RunPython(create_superuser, reverse_superuser),
    ]
